{"name":"Bencode","tagline":"BitTorrent encoding implementation for Clojure.","body":"# bencode\r\n\r\nClojure implementation of [Bencode](http://bittorrent.org/beps/bep_0003.html#bencoding),\r\nthe encoding used by BitTorrent for storing and transmitting loosely structured data.\r\n\r\n\r\n## Installation\r\n\r\nAdd the following dependency to your _project.clj_ file:\r\n\r\n````clojure\r\n\r\n[bencode \"0.0.1\"]\r\n````\r\n\r\n\r\n## Usage\r\n\r\nFirst, import the `bencode.core` namespace:\r\n\r\n````clojure\r\n\r\n(use '[bencode.core])\r\n````\r\n\r\nAt this point, you should be able to use `bencode` and `bdecode` functions for\r\nencoding and decoding, respectively:\r\n\r\n````clojure\r\n\r\n(bencode {:cow \"moo\" :spam [\"info\" 32]})\r\n;; -> \"d3:cow3:moo4:spaml4:infoi32eee\"\r\n\r\n(bdecode \"d3:cow3:moo4:spaml4:infoi32eee\")\r\n;; -> {:cow \"moo\", :spam [\"info\" 32]}\r\n```\r\n\r\n\r\n### Encoding Options\r\n\r\nThe `bencode` function also accepts an optional map:\r\n\r\n````clojure\r\n\r\n(bencode \"moo\" {:raw-str? true})\r\n;; -> #<byte[] [B@53c059f6>\r\n````\r\n\r\nAt this point, these are the exposed options:\r\n\r\n* `:to` - Instance of `OutputStream` where the encoding result should be\r\n  written to. Default: `nil`\r\n* `:raw-str?` - Whether the string being encoded should be returned as a\r\n  byte array. This option can only be used if the option `:to` is absent.\r\n  Default: `false`\r\n\r\n\r\n### Decoding Options\r\n\r\nThe `bdecode` function also accepts an optional map:\r\n\r\n````clojure\r\n\r\n(bdecode \"d3:cow3:moo4:spaml4:infoi32eee\", {:str-keys? true :raw-keys [\"spam\"]})\r\n;; -> {\"cow\" \"moo\", \"spam\" [#<byte[] [B@74184b3b> 32]}\r\n````\r\n\r\nAt this point, these are the exposed options:\r\n\r\n\r\n* `:str-keys?` - Whether strings should be used as dictionary keys instead of\r\n  keywords. Default: `false`\r\n* `:raw-keys` - List containing all dictionary keys whose values should be\r\n  decoded as raw strings instead of UTF-8-encoded strings. Default: `nil`\r\n\r\n\r\n### Supported Data Types\r\n\r\nAccording to the Bencoding spec, only _strings_, _integers_, _lists_ and\r\n_dictionaries_ are supported. Furthermore, only strings can be used as\r\nkeys in a dictionary, and the keys must appear in sorted order (sorted as raw\r\nstrings, not alphanumerics).\r\n\r\nOn the Clojure side, _keywords_ are encoded as _strings_, _sets_ and _vectors_\r\nare encoded as _lists_, and all integers - _byte_, _short_, _int_, _long_,\r\n_big integers_ - are encoded as _integers_ with arbitrary size, and decoded to\r\nthe smallest type which can hold the number without losing data.\r\n\r\n\r\n## License\r\n\r\nCopyright (C) Daniel Fernandes Martins\r\n\r\nDistributed under the New BSD License. See COPYING for further details.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}